import streamlit as st
import pandas as pd
from streamlit_option_menu import option_menu
from pathlib import Path
from apps import home, prediction_logreg
from plotly.io import templates

templates.default = "ggplot2"

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ø—Ä—è–º—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –±–∞–Ω–∫–∞",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded",
)


@st.cache_data
def preprocess_data(file_path):
    df = pd.read_csv(file_path, sep=';')

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º —Ç–∏–ø–∞–º
    categorical_columns = [
        'job',
        'marital',
        'education',
        'default',
        'housing',
        'loan',
        'contact',
        'month',
        'day_of_week',
        'poutcome',
        'y'
    ]
    for column in categorical_columns:
        df[column] = df[column].astype('category')
    return df


class Menu:
    apps = [
        {
            "func": home.app,
            "title": "–ì–ª–∞–≤–Ω–∞—è",
            "icon": "house-fill"
        },
        {
            "func": prediction_logreg.app,
            "title": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "icon": "person-check-fill"
        },
    ]

    def run(self):
        with st.sidebar:
            titles = [app["title"] for app in self.apps]
            icons = [app["icon"] for app in self.apps]

            selected = option_menu(
                "Menu",
                options=titles,
                icons=icons,
                menu_icon="cast",
                default_index=0,
            )
            st.info(
                """
                ## –ê–Ω–∞–ª–∏–∑ –ø—Ä—è–º—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –±–∞–Ω–∫–∞
                –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ —Å —Ü–µ–ª—å—é –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –ø—Ä—è–º—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º. –û–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ä–æ—á–Ω—ã–π –≤–∫–ª–∞–¥, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–º—É —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥—É –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
                """
            )
        return selected


if __name__ == '__main__':
    current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()

    df = preprocess_data(current_dir / 'bank-additional-full.csv')
    categorical_features = df.select_dtypes(include='category').columns.tolist()
    numerical_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

    menu = Menu()
    st.sidebar.image(str(current_dir / 'images' / 'logo.png'))
    selected = menu.run()
    for app in menu.apps:
        if app["title"] == selected:
            app["func"](df, current_dir)
            break
